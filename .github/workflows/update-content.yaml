name: update-content

on:
  workflow_dispatch:
    inputs:
      content:
        description: Updated JSON content
        required: true
        type: string
      filePath:
        description: Path to the JSON file
        required: true
        type: string
      imageFilePath:
        description: Directory for uploaded images
        required: true
        type: string

jobs:
  update-content:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Load and Update JSON file selectively
      - name: Update JSON file
        shell: pwsh
        run: |
          $jsonFilePath = "${{ inputs.filePath }}"
          $updatedContent = ConvertFrom-Json -InputObject "${{ inputs.content }}"

          # Read existing JSON file
          $existingContent = Get-Content -Path $jsonFilePath -Raw | ConvertFrom-Json

          # Update only the provided fields
          foreach ($updatedProject in $updatedContent) {
            $projectToUpdate = $existingContent | Where-Object { $_.name -eq $updatedProject.name }
            if ($projectToUpdate) {
              foreach ($field in $updatedProject.PSObject.Properties.Name) {
                $projectToUpdate.$field = $updatedProject.$field
              }
            }
          }

          # Save the updated JSON back to the file
          $existingContent | ConvertTo-Json -Depth 10 | Set-Content -Path $jsonFilePath

      # Step 3: Decode and Replace Images using mapping
      - name: Decode and Replace Images
        shell: pwsh
        run: |
          $imageDir = "${{ inputs.imageFilePath }}"
          mkdir -Force -Path $imageDir

          # Extract mapping from `content`
          $projects = ConvertFrom-Json -InputObject "${{ inputs.content }}"
          foreach ($project in $projects) {
            $imageName = $project.imageUrl
            $imageFilePath = Join-Path $imageDir $imageName

            # Check if corresponding base64 image file exists using mapping
            $uploadedImage = "$imageName" -replace '\.webp$', '.sm.webp'
            if (Test-Path $uploadedImage) {
              # Decode and save image to target path
              $base64Image = Get-Content -Path $uploadedImage -Raw
              $imageBytes = [Convert]::FromBase64String($base64Image)
              Set-Content -Path $imageFilePath -Value $imageBytes -AsByteStream
            }
          }

      # Step 4: Commit and push changes
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add "${{ inputs.filePath }}"
          git add "${{ inputs.imageFilePath }}/*"
          git commit -m "Update content and upload images via GitHub Actions" || echo "No changes to commit"
          git push

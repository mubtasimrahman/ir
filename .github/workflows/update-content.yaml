name: update-content

on:
  workflow_dispatch:
    inputs:
      content:
        description: Updated JSON content
        required: true
        type: string
      filePath:
        description: Path to the JSON file
        required: true
        type: string
      imageFilePath:
        description: Directory for uploaded images
        required: false
        type: string
      mapping:
        description: Mapping between old and new images
        required: false
        type: string

jobs:
  update-content:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Conditional JSON update
      - name: Update JSON file
        if: inputs.content && inputs.filePath
        run: |
          echo "Updating JSON file..."
          content='${{ inputs.content }}'
              content2=$(echo "$content" | jq -r '.[4]')

              content3=$(echo "$content2" | jq -r '.uploadedFiles')

              content4=$(echo "$content3" | jq -r '."1.sm.webp"')
              content5=$(echo "$content3" | jq -r '."2.sm.webp"')

              echo "Content3: $content3"
              echo "Content4: $content4"
              echo "Content5: $content5"

          # Parse JSON content to remove "uploadedFiles"
          echo "$content" | jq 'map(del(.uploadedFiles))' > "${{ inputs.filePath }}"

      - name: Deocode
        uses: akiojin/decode-base64-github-action@v0.1.0
        id: decode-base64
        with:
          base64: <Base64>
      - run: |
          echo ${{ steps.decode-base64.outputs.decoded }}  

      # Step 3: Decode and replace images if mapping is provided
      - name: Decode and replace images
        if: inputs.imageFilePath && inputs.mapping
        run: |
          echo "Decoding and replacing images..."
          mapping='${{ inputs.mapping }}'
          imageFilePath='${{ inputs.imageFilePath }}'

          # Iterate over mapping
          echo "$mapping" | jq -r 'to_entries[] | "echo \"\(.key)\" | base64 --decode > \"$imageFilePath/\(.value)\""' | bash

      # Step 4: Commit and push changes
      - name: Commit and push changes
        run: |
          echo "Committing changes..."
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add "${{ inputs.filePath }}"
          if [ -n "${{ inputs.imageFilePath }}" ]; then
            git add "${{ inputs.imageFilePath }}"
          fi
          git commit -m "Update content and images via GitHub Actions" || echo "No changes to commit"
          git push
